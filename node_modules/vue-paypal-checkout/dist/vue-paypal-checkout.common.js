function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _Object$keys = _interopDefault(require('babel-runtime/core-js/object/keys'));
var _Object$assign = _interopDefault(require('babel-runtime/core-js/object/assign'));
var shortid = _interopDefault(require('shortid'));
var paypal = _interopDefault(require('paypal-checkout'));

var PayPalCheckout$1 = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "paypal-button", attrs: { "id": _vm.id } });
  }, staticRenderFns: [],
  props: {
    id: {
      type: String,
      required: false,
      default: function _default() {
        return shortid.generate();
      }
    },
    amount: {
      type: String,
      required: true
    },
    client: {
      type: Object,
      required: true
    },
    commit: {
      type: Boolean,
      required: false,
      default: true
    },
    currency: {
      type: String,
      required: false,
      default: 'USD'
    },
    dev: {
      type: Boolean,
      required: false
    },
    invoiceNumber: {
      type: String,
      required: false
    },
    items: {
      type: Array,
      required: false
    },
    buttonStyle: {
      type: Object,
      required: false,
      validator: function validator(value) {
        var isValid = function isValid(item, options) {
          return options.some(function (v) {
            return v === item;
          });
        };
        var copy = _Object$assign({}, value);
        var options = {
          size: ['tiny', 'small', 'medium', 'responsive'],
          color: ['gold', 'blue', 'silver'],
          shape: ['pill', 'rect']
        };

        _Object$keys(options).forEach(function (key) {
          var item = copy[key];
          var valid = isValid(item, options[key]);

          if (!valid) {
            // eslint-disable-next-line
            console.warn('style.' + key + ' = \'' + item + '\' isn\'t a valid option', options[key]);
            return false;
          }

          return true;
        });

        return true;
      }
    }
  },
  computed: {
    env: function env() {
      return this.dev ? 'sandbox' : 'production';
    }
  },
  methods: {
    item_list: function item_list() {
      var itemList = {
        items: []
      };

      this.items.forEach(function (item) {
        itemList.items.push(item);
      });

      return itemList;
    },
    PayPalPayment: function PayPalPayment() {
      var transaction = {
        amount: {
          total: this.amount,
          currency: this.currency
        }
      };

      if (this.invoiceNumber !== undefined) {
        transaction.invoice_number = this.invoiceNumber;
      }

      if (this.items !== undefined) {
        transaction.item_list = this.item_list();
      }

      return paypal.rest.payment.create(this.env, this.client, {
        transactions: [transaction]
      });
    },
    onAuthorize: function onAuthorize(data, actions) {
      var vue = this;
      vue.$emit('paypal-paymentAuthorized', data);
      return actions.payment.execute().then(function (response) {
        vue.$emit('paypal-paymentCompleted', response);
      });
    },
    onCancel: function onCancel(data) {
      var vue = this;
      vue.$emit('paypal-paymentCancelled', data);
    }
  },
  mounted: function mounted() {
    var vue = this;

    var buttonObject = {
      // Pass in env
      env: vue.env,

      // Pass in the client ids to use to create your transaction
      // on sandbox and production environments
      client: vue.client,

      // Pass the payment details for your transaction
      // See https://developer.paypal.com/docs/api/payments/#payment_create for the expected json parameters
      payment: vue.PayPalPayment,

      // Display a "Pay Now" button rather than a "Continue" button
      commit: vue.commit,

      // Pass a function to be called when the customer completes the payment
      onAuthorize: vue.onAuthorize,

      // Pass a function to be called when the customer cancels the payment
      onCancel: vue.onCancel
    };

    // validate style prop
    if (vue.buttonStyle !== undefined) {
      buttonObject.style = vue.buttonStyle;
    }

    paypal.Button.render(buttonObject, vue.id);
  }
};

var components = {
  'paypal-checkout': PayPalCheckout$1
};

_Object$keys(components).forEach(function (name) {
  // in browsers ~
  if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.component(name, components[name]);
  }
});

module.exports = PayPalCheckout$1;
